{"version":3,"sources":["components/AppNavbar.js","components/Card.js","components/ItemModal.js","store/reducer.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","state","collapsed","toggleNavbar","_this","setState","react_default","a","createElement","Navbar","color","dark","NavbarBrand","href","className","NavbarToggler","onClick","this","Collapse","isOpen","navbar","Nav","NavItem","NavLink","React","Component","host","CardHld","onDeleteClick","id","props","deleteItem","imgChk","link","getItems","_this2","items","item","Row","map","_ref","_id","name","location","Col","sm","key","width","src","startsWith","alt","Card","body","CardTitle","Button","size","bind","CardText","connect","dispach","type","axios","get","then","res","payload","data","delete","concat","ItemModal","modal","toggle","onChange","e","_this$setState","Object","defineProperty","target","value","onSubmit","preventDefault","newItem","addItem","style","margin","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","placeholder","marginTop","block","post","initialState","loading","reducer","arguments","length","undefined","action","newState","objectSpread","filter","toConsumableArray","store","createStore","App","es","components_AppNavbar","Container","components_ItemModal","components_Card","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2a59122f.chunk.js","sourcesContent":["import React from 'react';\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink } from 'reactstrap';\n\nclass AppNavbar extends React.Component {\n  state = {\n      collapsed: true\n  };\n\n  toggleNavbar = () => {\n    this.setState({\n      collapsed: !this.state.collapsed\n    });\n  }\n\n  render () {\n    return (\n        <div>\n          {/*<Navbar color=\"faded\" light>*/}\n          <Navbar color=\"dark\" dark>\n            <NavbarBrand href=\"/\" className=\"mr-auto\">Local Infoma</NavbarBrand>\n            <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\n            <Collapse isOpen={!this.state.collapsed} navbar>\n              <Nav navbar>\n                <NavItem>\n                  <NavLink href=\"/components/\">Components</NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink href=\"https://github.com/reactstrap/reactstrap\">GitHub</NavLink>\n                </NavItem>\n              </Nav>\n            </Collapse>\n          </Navbar>\n        </div>\n      );\n    }\n}\n\nexport default AppNavbar;","import React, {Component} from 'react';\nimport {Container, ListGroup, ListGroupItem } from 'reactstrap';\nimport { Card, CardImg, CardText, CardBody, CardImgOverlay,\n  CardTitle, CardSubtitle, Button, Row, Col } from 'reactstrap';\n//import {CSSTransition, TransitionGroup} from 'react-transition-group';\n//import uuid from 'uuid';\nimport {connect} from 'react-redux';\n//import {getItems} from '../actions/itemActions';\n//import PropTypes from 'prop-types';\nimport axios from 'axios';\n\n//var host = \"http://\"+ window.location.hostname;\nvar host = \"https://ec2-18-216-236-140.us-east-2.compute.amazonaws.com\";\n//console.log(\"host: \" + host);\n\nclass CardHld extends Component{\n\n    componentDidMount() {   \n        this.props.getItems();\n    }\n\n    onDeleteClick = (id) => {\n        //console.log(this + \"-\" + id);\n        //console.log(JSON.stringify(this));\n        this.props.deleteItem(id);\n    }\n\n    imgChk = link => { (link === \"\") ? \n                            link = \"https://images.unsplash.com/photo-1499892477393-f675706cbe6e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" \n                            : link = link;\n                            return link;\n                        };               \n\n    render () {\n        const items = this.props.item;\n        //console.log('items' + items);\n        return (\n             //<Container>\n                <Row>\n                    {items.map(({ _id, name, location, link}) => (\n                        <Col sm=\"6\" key={_id}>\n                        {/* {this.imgChk(link)} */}\n                        {/* <img width=\"100%\" src={this.imgChk(link)} alt=\"Card image cap\" /> */}\n                        <img width=\"100%\" src={\n                                (!link.startsWith(\"https://\")) ? \n                                \"https://images.unsplash.com/photo-1499892477393-f675706cbe6e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" : \n                                link} alt=\"Card image cap\" />\n                            <Card body>\n                                <CardTitle>\n                                    {name},  {location}\n                                    <Button\n                                        className=\"float-right\" color=\"danger\" size=\"sm\"\n                                        onClick = {this.onDeleteClick.bind(this, _id)}\n                                        >X\n                                    </Button>\n                                </CardTitle>\n                                {/* <img width=\"100%\" src= {link} alt=\"Card image cap\" /> */}\n                                <CardText>With supporting text below as a natural lead-in to additional content.</CardText>\n                                <Button>Go somewhere</Button>\n                            </Card>\n                        </Col>\n                    ))}\n                </Row>\n            //</Container>\n        );\n    };\n};\n\nconst mapStateToProps = (state) => {\n    //console.log('mapState: ' + JSON.stringify(state));\n    return {\n        item: state.items\n    }\n};\n\nconst mapDispachToProps = (dispach) => {\n    //const setItemsLoading = () => dispach({type:'ITEMS_LOADING'});\n    return {\n        //getItems: () => dispach => { \n        getItems: () => { \n            //dispach(setItemsLoading());\n            dispach({type:'ITEMS_LOADING'});\n            axios\n                .get(host+':5000/api/items/')\n                .then(res => dispach({type:'GET_ITEMS', payload: res.data}))\n                //.then(res => console.log('res' + JSON.stringify(res.data)))\n        },\n\n        // getItems: () => dispach({type:'GET_ITEMS'}),\n        //deleteItem: (_id) => dispach({type:'DELETE_ITEM', id})\n        deleteItem: (id) => {\n            axios\n                .delete(host+`:5000/api/items/${id}`)\n                .then (res => dispach({type:'DELETE_ITEM', id}))\n        }\n        \n    }\n};\n\nexport default connect(mapStateToProps, mapDispachToProps)(CardHld);","import React, { Component } from 'react';\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    Form,\n    FormGroup,\n    Label,\n    Input\n} from 'reactstrap';\nimport { connect } from 'react-redux';\n//import uuid from 'uuid';\nimport axios from 'axios';\n\n//var host = \"http://\"+ window.location.hostname;\nvar host = \"https://ec2-18-216-236-140.us-east-2.compute.amazonaws.com\";\n\nclass ItemModal extends Component {\n    state = {\n        modal: false,\n        name: '',\n        location: '',\n        link: ''\n    };\n\n    toggle = () => {\n        this.setState({\n            modal: !this.state.modal\n        });\n    };\n\n    onChange = (e) => {\n        this.setState({ \n            [e.target.name]: e.target.value,\n            [e.target.location]: e.target.value,\n            [e.target.link]: e.target.value\n        });\n    };\n\n    onSubmit = e => {\n        e.preventDefault();\n\n        const newItem = {\n            //id: uuid(),\n            name: this.state.name,\n            location: this.state.location,\n            link: this.state.link\n        }\n\n        // Add item via addItem dispach action\n        this.props.addItem(newItem);\n\n        //Close modal\n        this.toggle();\n    };\n\n    render() {\n        return(\n            <div>\n                <Button\n                    color=\"dark\"\n                    style={{margin: '2rem'}}\n                    onClick={this.toggle}\n                    >Add Item\n                </Button>\n                <Modal\n                    isOpen={this.state.modal}\n                    toggle={this.toggle}\n                    >\n                        <ModalHeader toggle={this.toggle}>\n                            Add New Item\n                        </ModalHeader>\n                        <ModalBody>\n                            <Form onSubmit={this.onSubmit}>\n                                <FormGroup>\n                                    <Label for=\"item\">Item</Label>\n                                    <Input\n                                        type=\"text\"\n                                        name=\"name\"\n                                        id=\"item\"\n                                        placeholder=\"Add new item\"\n                                        onChange={this.onChange}\n                                        />\n                                    <Input\n                                        type=\"text\"\n                                        name=\"location\"\n                                        id=\"item\"\n                                        placeholder=\"Add shop location\"\n                                        onChange={this.onChange}\n                                        style={{marginTop: '2rem'}}\n                                        />\n                                    <Input\n                                        type=\"text\"\n                                        name=\"link\"\n                                        id=\"item\"\n                                        placeholder=\"Add image link\"\n                                        onChange={this.onChange}\n                                        style={{marginTop: '2rem'}}\n                                        />\n                                    <Button\n                                        color=\"dark\"\n                                        style={{marginTop: '2rem'}}\n                                        block\n                                        >Add Item\n                                    </Button>\n                                </FormGroup>\n                            </Form>\n                        </ModalBody>\n\n                </Modal>\n\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    item: state.item\n})\n\nconst mapDispachToProps = (dispach) => {\n    return {\n        addItem: (item) => {\n            axios\n                .post(host+':5000/api/items', item)\n                .then(res => dispach({type:'ADD_ITEM', payload: res.data}))\n        }\n    }\n};\n\nexport default connect(mapStateToProps, mapDispachToProps) (ItemModal);","//import uuid from 'uuid';\n\nconst initialState = {\n    items: [],\n    loading: false\n};\n\nconst reducer = (state = initialState, action) => {\n    const newState = {...state};\n\n    switch(action.type) {\n        case 'GET_ITEMS':\n            //console.log('newState: ' + JSON.stringify(action.payload))\n            return {\n                newState,\n                items: action.payload,\n                loading: false\n            };\n            //break;\n        case 'DELETE_ITEM':\n            //console.log('DELETE_ITEM' + \" - \" + action.id );\n            return {\n                ...state, \n                items: state.items.filter(item => item._id !== action.id)\n            };\n            //break;\n        case 'ADD_ITEM':\n            //console.log('ADD_ITEM' + \" - \" + JSON.stringify(action.payload) );\n            //console.log('ADD_ITEM-state' + \" - \" + JSON.stringify({...state}) );\n            return {\n                ...state,\n                items: [action.payload, ...state.items]\n            };\n            //break\n        case 'ITEMS_LOADING':\n            return{\n                ...state,\n                loading: true\n            }\n            //break\n        default:\n            return state;\n    }\n};\n\nexport default reducer;","import React, { Component } from 'react';\nimport AppNavbar from './components/AppNavbar';\nimport CardHld from './components/Card';\nimport ItemModal from './components/ItemModal';\n\nimport {Provider} from 'react-redux';\n//import store from './store';\nimport {createStore} from 'redux';\nimport reducer from './store/reducer';\nimport {Container} from 'reactstrap';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nconst store = createStore(reducer);\n\n//make a new Context\n//const MyContext = React.createContext(\"east\");\n\n//create Context provider\n/* class MyProvider extends Component {\n  state = {\n    host = \"http://\"+ window.location.hostname\n  }\n  render() {\n    return(\n      <MyContext.Provider value=\"Hie\">\n        {this.props.children}\n      </MyContext.Provider>\n    )\n  }\n}\n */\nfunction App() {\n  return (\n    <Provider store={store}>\n    {/* <MyContext.Provider value={\"North\"}> */}\n      <div className=\"App\">\n        {/*<h1>Hello!!!</h1>*/}\n        {/* {(() => {\n          console.log(\"storeB: \"+ JSON.stringify(store))\n          store.host = \"Host\";\n          console.log(\"storeA: \"+ JSON.stringify(store))\n        })()} */}\n        <AppNavbar />\n        <Container>\n          <ItemModal />\n          <CardHld />\n        </Container>\n      </div>\n    {/* </MyContext.Provider> */}\n    </Provider>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}